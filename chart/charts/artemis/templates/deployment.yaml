{{- $api := deepCopy .Values.api }}
{{- $_ := set $api "enabled" true }}
{{- $_ := set $api "component" "api" }}
{{- $_ := set $api "entrypointArgs" (list "api") }}
{{- $_ := set $api "kerberos" false }}
{{- $api_service_port := dict }}
{{- $_ := set $api_service_port "name" "artemis-api" }}
{{- $_ := set $api_service_port "port" 8001 }}
{{- $_ := set $api "ports" (list $api_service_port) }}
{{- $dispatcher := deepCopy .Values.dispatcher }}
{{- $_ := set $dispatcher "enabled" true }}
{{- $_ := set $dispatcher "component" "dispatcher" }}
{{- $_ := set $dispatcher "entrypointArgs" (list "dispatcher") }}
{{- $_ := set $dispatcher "kerberos" false }}
{{- $scheduler := deepCopy .Values.scheduler }}
{{- $_ := set $scheduler "enabled" true }}
{{- $_ := set $scheduler "component" "scheduler" }}
{{- $_ := set $scheduler "entrypointArgs" (list "scheduler") }}
{{- $_ := set $scheduler "kerberos" false }}
{{- $worker := deepCopy .Values.worker }}
{{- $_ := set $worker "enabled" true }}
{{- $_ := set $worker "component" "worker" }}
{{- $_ := set $worker "entrypointArgs" (list "worker") }}
{{- $_ := set $worker "kerberos" .Values.kerberos.enabled }}
{{- $periodic_worker := deepCopy .Values.periodic_worker }}
{{- $_ := set $periodic_worker "component" "periodic-worker" }}
{{- $_ := set $periodic_worker "entrypointArgs" (list "worker") }}
{{- $_ := set $periodic_worker "kerberos" false }}
{{- $_ := set $periodic_worker "kerberos" .Values.kerberos.enabled }}

{{- range tuple $api $dispatcher $scheduler $worker $periodic_worker }}
{{- if .enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "artemis.fullname" $ }}-{{ .component }}
  labels:
    {{- include "artemis.labels" $ | nindent 4 }}
    app.kubernetes.io/app: {{ template "artemis.fullname" $ }}
    app.kubernetes.io/component: {{ .component }}
  namespace: {{ $.Release.Namespace }}
spec:
  replicas: {{ default 1 .replicaCount }}
  selector:
    matchLabels:
      {{- include "artemis.selectorLabels" $ | nindent 6 }}
      app.kubernetes.io/app: {{ template "artemis.fullname" $ }}
      app.kubernetes.io/component: {{ .component }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        {{- include "artemis.selectorLabels" $ | nindent 8 }}
        app.kubernetes.io/app: {{ template "artemis.fullname" $ }}
        app.kubernetes.io/component: {{ .component }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/config-configmap.yaml") $ | sha256sum }}
        checksum/env: {{ include (print $.Template.BasePath "/env-configmap.yaml") $ | sha256sum }}
    spec:
      volumes:
      - name: artemis-config
        configMap:
          name: {{ template "artemis.configMapName" $ }}
      {{- if .kerberos }}
      - name: kerberos
        emptyDir:
          medium: Memory
      {{- end }}
      initContainers:
      - name: wait-for-postgres
        image: {{ template "artemis.image" $ }}
        imagePullPolicy: {{ default "" $.Values.imagePullPolicy | quote }}
        command:
        - /wait-for-postgres.sh
        env:
        - name: ARTEMIS_DEPLOYMENT
          value: {{ template "artemis.fullname" $ }}
        - name: ARTEMIS_COMPONENT
          value: {{ .component }}.wait-for-postgres
        - name: POSTGRESQL_USER
          value: {{ template "artemis.psql.username" $ }}
        - name: POSTGRESQL_PASSWORD
          value: {{ template "artemis.psql.password" $ }}
        - name: POSTGRESQL_HOSTNAME
          value: {{ template "artemis.psql.host" $ }}
        - name: POSTGRESQL_PORT
          value: {{ include "artemis.psql.port" $ | quote }}
      - name: wait-for-rabbitmq
        image: {{ template "artemis.image" $ }}
        imagePullPolicy: {{ default "" $.Values.imagePullPolicy | quote }}
        command:
        - /wait-for-rabbitmq.sh
        env:
        - name: ARTEMIS_DEPLOYMENT
          value: {{ template "artemis.fullname" $ }}
        - name: ARTEMIS_COMPONENT
          value: {{ .component }}.wait-for-rabbitmq
        - name: RABBITMQ_HOSTNAME
          value: {{ template "artemis.rabbitmq.host" $ }}
        - name: RABBITMQ_PORT
          value: {{ include "artemis.rabbitmq.port" $ | quote }}
      - name: wait-for-redis
        image: {{ template "artemis.image" $ }}
        imagePullPolicy: {{ default "" $.Values.imagePullPolicy | quote }}
        command:
        - /wait-for-redis.sh
        env:
        - name: ARTEMIS_DEPLOYMENT
          value: {{ template "artemis.fullname" $ }}
        - name: ARTEMIS_COMPONENT
          value: {{ .component }}.wait-for-rabbitmq
        - name: REDIS_HOSTNAME
          value: {{ template "artemis.redis.host" $ }}
        - name: REDIS_PORT
          value: {{ include "artemis.redis.port" $ | quote }}
      containers:
      - name: {{ template "artemis.fullname" $ }}-{{ .component }}
        image: {{ template "artemis.image" $ }}
        imagePullPolicy: {{ default "" $.Values.image.pullPolicy | quote }}
        {{- if .resources }}
        resources: {{- toYaml .resources | nindent 8 }}
        {{- end }}
        command: ["/entrypoint.sh"]
        args: {{ .entrypointArgs }}
        env:
        - name: ARTEMIS_DEPLOYMENT
          value: {{ template "artemis.fullname" $ }}
        - name: ARTEMIS_COMPONENT
          value: {{ .component }}
        envFrom:
        - configMapRef:
            name: {{ template "artemis.fullname" $ }}-env
        volumeMounts:
        - name: artemis-config
          mountPath: {{ template "artemis.configDirMountPath" $ }}
        {{- if .ports }}
        ports:
        {{- range .ports }}
        - name: {{ .name }}
          containerPort: {{ .port }}
        {{- end }}
        {{- end }}
        {{- if .kerberos }}
        - name: kerberos
        image: {{ template "artemis.kerberos.image" $ }}
        imagePullPolicy: {{ default "" $.Values.kerberos.imagePullPolicy | quote }}
        volumeMounts:
        - name: kerberos
          mountPath: {{ template "artemis.kerberos.ccacheDir" $ }}
      {{- end }}
{{- end }}
{{- end }}
