## Global configuration values
##
global:
  psql:
    username: ""
    password: ""
    database: ""
    host: ""
    port: ""

## Artemis image
##
image:
  registry: quay.io
  repository: testing-farm/artemis
  tag: "v0.0.23"

## PostgreSQL database access
##
psql:
  username: ""
  password: ""
  host: ""
  port: 6379
  database: ""

## RabbitMQ service
##
rabbitmq:
  username: ""
  password: ""
  host: ""
  port: ""

redis:
  enabled: false
  host: ""
  port: 6379

## Database schema revision override used during database initializatino
dbSchemaRevision: ""

## Artemis configuration
##
#configuration:
#  ## Artemis users
#  ## Users can be configured using its name and optionally role (user or admin). If role
#  ## is omitted, defaults to `user`. Example:
#  ##   - name: admin
#  ##     role: admin
#  ##
#  users: []
#  ## SSH keys artemis can use to configure and access guests
#  ## Keys can be configured as follows:
#  ##   - name: <key_name>
#  ##     owner: <artemis_user>
#  ##
#  ## Each SSH key should have have corresponding ansible vault-encrypted <key_name>.yaml
#  ## available in `conf/` directory
#  ##
#  ssh_keys: []
#  ## Priority groups
#  ## Priority group can be added with following syntax:
#  ##   - name: <priority_group_name>
#  ##
#  priority_groups: []
#  ## Default guest tags. These are applied to all guests.
#  ## Guest tag can be added using the following syntax:
#  ##   <tag_name>: <tag_value>
#  ##
#  guest_tags: {}
#  ## Resource pools
#  ## Resource pool can be added using following syntax:
#  ##   - name: <pool_name>
#  ##     driver: <pool_driver>
#  ##     parametes:
#  ##       <pool_driver_specific_parameters>
#  ##       capabilities:
#  ##         <pool_capabilities>
#  ##
#  pools: []

## Ansible vault password used to decrypt ssh keys
##
vaultPassword: ""

## Artemis API service deployment configuration
##
api:
  ## Number of instances to run
  replicaCount: 1
  ## Port the service should be exposed on
  port: 8001
  ## Number of processes each instance should run
  processes: 1
  ## Number of threads
  threads: 1
  ## Container resources
  ## See: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  resources: {}

## Artemis dispatcher deployment configuration
dispatcher:
  replicaCount: 1
  resources: {}

## Artemis scheduler deployment configuration
scheduler:
  replicaCount: 1
  resources: {}

## Artemis workers configuration
## It is possible to define arbitrarily many worker configurations to e.g. define
## different workers to handle different types of tasks. Worker is defined as follows:
##  - name: <worker_name>
##    replicaCount: <number_of_instances>
##    processes: <number_of_worker_processes>
##    thread: <number_of_worker_threads>
##    queues: <worker_queues>
##    resources:
##      <worker_resources>
##
workers:
- replicaCount: 1
  ## Number of worker processes
  processes: 1
  ## Number of worker threads
  threads: 1
  ## Queues the worker should process
  queues: ""
  resources: {}

actor:
  route:
    guestRequestRetries: ""
    guestRequestMaxBackoff: ""
  prepare:
    verifySSHRetries: ""
    verifySSHMaxBackoff: ""
  acquire:
    guestRequestRetries: ""
    guestRequestMaxBackoff: ""

connectionCloseAfterDispatch: false

db:
  poolSize: 20
  poolMaxOverflow: 10

## Logging options
##
logging:
  method: ""
  level: ""
  json: ""
  logDir: ""
  dbPool: ""
  dbSlowQueries: ""
  dbSlowQueryThreshold: ""
  slowCliCommands: ""
  slowCliCommandPattern: ".*"
  slowCliCommandThreshold: ""
  promtailOptions: ""
  promtailUseCustomConfig: false

## Extra environmental variables to be passed to artemis containers
##
extraEnv: []

kerberos:
  image:
    registry: quay.io
    repository: testing-farm/kerberos
    tag: "latest"

sentry:
  dsn: ""
  baseUrl: ""
