FORMAT: 1A
HOST: https://artemis6.docs.apiary.io

# Artemis

**NOTE:** This document describes API that's still under development.

**Artemis** is a machine provisioning service. Given power over existing clouds, e.g. OpenStack or AWS, *Artemis* tries
to provision machines to satisfy user requests that describe hardware constraints, like minimal amount of RAM or number
of CPU cores.

Users request provisioning of *guests* via REST API, describing the desired hardware and software configuration in each
request. Requests are then matched with one or more *pools* - each pool represents one provisioning service like AWS,
Azure or private OpenStack instance, each with its own set of available machine setups it can provide - and a machine
is acquired from the most suitable pool and presented to the user.

Each provisioning request is asynchronous by its nature: user submits a *guest request* and receives an ID,
*guest name*. User then periodically checks status of the request, using the provided ID, until the request becomes
ready. From that moment on, the guest is available and reserved for the user. The request can be cancelled at any time,
causing release of its resources.

**NOTE:** for the sake of simplicity, the only defined part of the workflow is manipulation of guest requests.
The remaining parts - users, SSH keys, pools - will be added in the future extensions.


## Guests [/guest]

A "guest" stands for a remote machine that accepts SSH connections and satisfies given environmental requirements.

A guest has an ID, called `guestname`. When user makes a provisioning request, response contains the ID. User may own
multiple requests, each provisioning one guest.

### Create guest request [POST /guests]

- Request (application/json)

    - Attributes (Guest request)

- Response 201 (application/json)

    - Headers

            Location: /guest/{guestname}

    - Attributes (Guest info)

- Response 500 (application/json)

    - Attributes (Error)

### Inspect all guest request [GET /guests]

- Request

- Response 200 (application/json)

    - Attributes (array[Guest info])

- Response 500 (application/json)

    - Attributes (Error)

### Inspect guest request [GET /guests/{guestname}]

- Parameters

    - guestname (string) - ID of the guest.

- Request

- Response 200 (application/json)

    - Attributes (Guest info)

- Response 404 (application/json)

    - Attributes (ErrorNotFound)

- Response 500 (application/json)

    - Attributes (Error)

### Cancel guest request [DELETE /guests/{guestname}]

- Parameters

    - guestname (string) - ID of the guest.

- Request

- Response 200

- Response 404 (application/json)

    - Attributes (ErrorNotFound)

- Response 500 (application/json)

    - Attributes (Error)

### Create snapshot request [POST /guests/{guestname}/snapshots]

- Parameters

    - guestname (string) - ID of the guest.

- Request (application/json)

    - Attributes (Snapshot request)

- Response 201 (application/json)

    - Headers

            Location: /guest/{guestname}/snapshots/{snapshotname}

    - Attributes (Snapshot info)

- Response 500 (application/json)

    - Attributes (Error)

### Inspect snapshot request [GET /guests/{guestname}/snapshots/{snapshotname}]

- Parameters

    - guestname (string) - ID of the guest.
    - snapshotname (string) - ID of the snapshot.

- Request

- Response 200 (application/json)

    - Attributes (Snapshot info)

- Response 404 (application/json)

    - Attributes (ErrorNotFound)

- Response 500 (application/json)

    - Attributes (Error)

### Restore snapshot request [POST /guests/{guestname}/snapshots/{snapshotname}/restore]

- Parameters

    - guestname (string) - ID of the guest.
    - snapshotname (string) - ID of the snapshot.

- Request

- Response 201 (application/json)

    - Headers

            Location: /guest/{guestname}/snapshots/{snapshotname}

    - Attributes (Snapshot info)

- Response 404 (application/json)

    - Attributes (ErrorNotFound)

- Response 500 (application/json)

    - Attributes (Error)

### Cancel snapshot request [DELETE /guests/{guestname}/snapshots/{snapshotname}]

- Parameters

    - guestname (string) - ID of the guest.
    - snapshotname (string) - ID of the snapshot.

- Request

- Response 200

- Response 404 (application/json)

    - Attributes (ErrorNotFound)

- Response 500 (application/json)

    - Attributes (Error)

### Inspect guest events [GET /guests/{guestname}/events]

- Parameters

    - guestname (string) - ID of the guest.

- Request

- Response 200 (application/json)

    - Attributes (array[Guest event])

- Response 404 (application/json)

    - Attributes (ErrorNotFound)


## Data Structures

### Error

- message (string, required) - verbose description of the error.

### ErrorNotFound

- message: No such entity (string, required) - verbose description of the error.

### ErrorUnauthorized

- message: Not authorized to perform this action (string, required) - verbose description of the error.

### ErrorForbidden

- message: Not authorized to perform this action (string, required) - verbose description of the error.

### ErrorConflict

- message: Object already exists. (string, required) - verbose description of the error.

### Guest SSH info

- username (string, required) - SSH username to use when logging in.
- port (number, required)
- keyname (string, required) - name of the SSH key set up on the guest.

### Environment OS

- compose (string, required) - Name of the OS compose.

### Environment

- arch (string, required) - Architecture.
- os (Environment OS, required) - OS compose.
- pool (string) - Request a guest from a particular pool.
- snapshots (boolean) - Request a guest with snapshots support.

### Guest info

- guestname (string, required) - Name of the guest as specified in a response to a provisioning request.
- owner (string, required) - Owner of the guest.
- priority (string, required) - Priority group of the request.
- environment (Environment, required) - Environment descriptions of this guest.
- address (string) - IP address of the guest. Valid only when `state` is `ready`.
- ssh (Guest SSH info) - SSH connection details. Valid only when `state` is `ready`.
- state (enum) - current state of the guest.
  - error - Something wrong happened.
  - pending - Initial state. Newly created guest requests are set to PENDING and wait for being picked up be the router.
  - routing - Guest request is being evaluated.
  - provisioning - A pool has been assigned to fulfill the request.
  - promised - A pool driver began provisioning, and promised us delivery of the guest. This may require some time, and probably also a series of additional tasks.
  - preparing - A guest has been provisioned and now Artemis performs additional setup, e.g. running post-installation scripts.
  - ready - Provisioning is done, there is a guest available for SSH connections.
  - condemned - The guest has been released by the user, and it's resources may be released by its pool's driver.
  - releasing - The guest is being removed.
- user_data (any) - key/value mapping tracked with the guest, as requested by the original request.
- post_install_script (string) - if set, this script was executed after provisioning.
- ctime (datetime) - Date and time the guest request was created.

### Guest request

- keyname (string, required) - SSH key to set up.
- environment (Environment, required) - Requested environment of the guest.
- priority_group (string) - name of a *priority group* the request belongs to.
- user_data (any) - key/value mapping to track with the guest.
- post_install_script (string) - if set, this script will be executed after provisioning.

### Snapshot request

- start_again (boolean) - Start the guest after creating a snapshot

### Snapshot info

- snapshotname (string, required) - Name of the snapshot as specified in a response to a creating request.
- guestname (string, required) - Name of the guest as specified in a response to a provisioning request.
- state (enum, required) - current state of the snapshot.
  - error - Something wrong happened.
  - pending - Initial state. Newly created snapshot requests are set to PENDING and wait for being picked up be the router.
  - promised - A pool driver began provisioning, and promised us delivery of the guest. This may require some time, and probably also a series of additional tasks.
  - ready - Provisioning is done, there is a guest available for SSH connections.

### Guest event

- details (any, required) - Details of the guest event.
- eventname (string, required) - Name of the guest event.
- guestname (string, required) - Name of the guest as specified in a response to a provisioning request.
- updated (string, required) - Timestamp of the guest event in "yyyy-MM-dd HH:mm:ss.SSS" format
