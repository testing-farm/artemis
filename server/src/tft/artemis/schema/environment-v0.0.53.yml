$schema: http://json-schema.org/draft-07/schema#
description: Environment schema
type: object

definitions:

  # HW requirements: `boot` block
  hw_boot:
    type: object

    properties:
      method:
        type: string
        enum:
          - bios
          - uefi

    additionalProperties: false

    # enforce at least one property - we don't care which one, but we don't want
    # empty `boot`.
    minProperties: 1

  # HW requirements: `compatible` block
  hw_compatible:
    type: object

    properties:
      distro:
        type: array
        items:
          type: string

    # enforce at least one property - we don't care which one, but we don't want
    # empty `compatible`.
    minProperties: 1


  # HW requirements: `cpu` block
  hw_cpu:
    type: object

    properties:
      processors:
        anyOf:
          - type: string
          - type: integer
      sockets:
        anyOf:
          - type: string
          - type: integer
      cores:
        anyOf:
          - type: string
          - type: integer
      threads:
        anyOf:
          - type: string
          - type: integer
      cores-per-socket:
        anyOf:
          - type: string
          - type: integer
      threads-per-core:
        anyOf:
          - type: string
          - type: integer
      family:
        anyOf:
          - type: string
          - type: integer
      family-name:
        type: string
      model:
        anyOf:
          - type: string
          - type: integer
      model-name:
        type: string

    additionalProperties: false

    # enforce at least one property - we don't care which one, but we don't want
    # empty `cpu`.
    minProperties: 1

  # HW requirements: single `disk` item
  hw_disk:
    type: object

    properties:
      size:
        anyOf:
          - type: string
          - type: integer

    additionalProperties: false

    # enforce at least one property - we don't care which one, but we don't want
    # empty `disk`.
    minProperties: 1

  # HW requirements: `disk` block
  hw_disks:
    type: array
    items:
      "$ref": "#/definitions/hw_disk"

  hw_hostname:
    type: string

  hw_memory:
    anyOf:
      - type: string
      - type: integer

  # HW requirements: single `network` item
  hw_network:
    type: object

    properties:
      type:
        type: string

    additionalProperties: false

    # enforce at least one property - we don't care which one, but we don't want
    # empty `network`.
    minProperties: 1

  # HW requirements: `network` block
  hw_networks:
    type: array
    items:
      "$ref": "#/definitions/hw_network"

  # HW requirements: `tpm` block
  tpm:
    type: object

    properties:
      version:
        type: string

    additionalProperties: false
    minProperties: 1

  # HW requirements: `virtualization` block
  hw_virtualization:
    type: object

    properties:
      is-virtualized:
        type: boolean

      is-supported:
        type: boolean

      hypervisor:
        type: string
        enum:
          - nitro
          - kvm
          - xen

    additionalProperties: false

    # enforce at least one property - we don't care which one, but we don't want
    # empty `boot`.
    minProperties: 1

  # HW requirements: basic block
  hw_block:
    type: object

    properties:
      boot:
        "$ref": "#/definitions/hw_boot"

      compatible:
        "$ref": "#/definitions/hw_compatible"

      cpu:
        "$ref": "#/definitions/hw_cpu"

      disk:
        "$ref": "#/definitions/hw_disks"

      hostname:
        "$ref": "#/definitions/hw_hostname"

      memory:
        "$ref": "#/definitions/hw_memory"

      network:
        "$ref": "#/definitions/hw_networks"

      tpm:
        "$ref": "#/definitions/tpm"

      virtualization:
        "$ref": "#/definitions/hw_virtualization"

    additionalProperties: false

    # enforce at least one property - we don't care which one, but we don't want
    # empty `block`.
    minProperties: 1

  # HW requirements: conditions
  hw_and:
    type: object
    properties:
      "and":
        type: array
        items:
          anyOf:
            - "$ref": "#/definitions/hw_boot"
            - "$ref": "#/definitions/hw_compatible"
            - "$ref": "#/definitions/hw_cpu"
            - "$ref": "#/definitions/hw_disks"
            - "$ref": "#/definitions/hw_networks"
            - "$ref": "#/definitions/tpm"
            - "$ref": "#/definitions/hw_virtualization"
            - "$ref": "#/definitions/hw_block"
            - "$ref": "#/definitions/hw_and"
            - "$ref": "#/definitions/hw_or"

    required:
      - "and"

  hw_or:
    type: object
    properties:
      "or":
        type: array
        items:
          anyOf:
            - "$ref": "#/definitions/hw_boot"
            - "$ref": "#/definitions/hw_compatible"
            - "$ref": "#/definitions/hw_cpu"
            - "$ref": "#/definitions/hw_disks"
            - "$ref": "#/definitions/hw_networks"
            - "$ref": "#/definitions/tpm"
            - "$ref": "#/definitions/hw_virtualization"
            - "$ref": "#/definitions/hw_block"
            - "$ref": "#/definitions/hw_and"
            - "$ref": "#/definitions/hw_or"

    required:
      - "or"

  hw_constraints:
    anyOf:
      - "$ref": "#/definitions/hw_boot"
      - "$ref": "#/definitions/hw_compatible"
      - "$ref": "#/definitions/hw_cpu"
      - "$ref": "#/definitions/hw_disks"
      - "$ref": "#/definitions/hw_networks"
      - "$ref": "#/definitions/tpm"
      - "$ref": "#/definitions/hw_virtualization"
      - "$ref": "#/definitions/hw_block"
      - "$ref": "#/definitions/hw_and"
      - "$ref": "#/definitions/hw_or"

    required: []

  hw_requirements:
    type: object

    properties:
      arch:
        type: string

      constraints:
        "$ref": "#/definitions/hw_constraints"

    required:
      - arch

  os_requirements:
    type: object

    properties:
      compose:
        type: string

    required:
      - compose

    additionalProperties: false

  kickstart_specification:
    type: object

    # Properties are derived from the official Beaker documentation:
    # https://beaker-project.org/docs/man/bkr.html#cmdoption-bkr-kernel-options
    properties:

      # KS property: `kernel-options`
      kernel-options:
        type: string

      # KS property: `kernel-options-post`
      kernel-options-post:
        type: string

      # KS property: `metadata`
      metadata:
        type: string

      # KS property: `post-install`
      post-install:
        type: string

      # KS property: `pre-install`
      pre-install:
        type: string

      # KS property: `script`
      script:
        type: string

    additionalProperties: false


properties:
  hw:
    "$ref": "#/definitions/hw_requirements"

  os:
    "$ref": "#/definitions/os_requirements"

  kickstart:
    "$ref": "#/definitions/kickstart_specification"

  pool:
    anyOf:
      - type:
        - string
      - type:
        - "null"
    default: null

  snapshots:
    type: boolean
    default: false

  spot_instance:
    anyOf:
      - type:
        - boolean
      - type:
        - "null"
    default: null

required:
  - hw
  - os
  - kickstart

additionalProperties: false
