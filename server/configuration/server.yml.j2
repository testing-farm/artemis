---

users:
  - name: admin
    role: admin

  - name: artemis

ssh-keys:
  - name: master-key
    owner: artemis
    private: |
      {{ keys.master.private | indent(6) }}
    public: |
      {{ keys.master.public | indent(6) }}
    fingerprint: |
      {{ keys.master.fingerprint }}

priority-groups:
  - name: default-priority

guest_tags: {{ guest_tags }}

pools:
  {% if openstack is defined %}
  - name: openstack
    driver: openstack
    {% if openstack.guest_tags is defined %}
    guest_tags: {{ openstack.guest_tags }}
    {% endif %}
    parameters:
      username: "{{ openstack.credentials.username or '' }}"
      password: "{{ openstack.credentials.password or ''}}"
      auth-url: "{{ openstack.credentials.auth_url }}"
      project-name: "{{ openstack.credentials.project_name }}"
      {% if openstack.credentials.project_domain_id is defined and openstack.credentials.project_domain_id != "" %}
      project-domain-id: "{{ openstack.credentials.project_domain_id }}"
      {% endif %}
      {% if openstack.credentials.project_domain_name is defined and openstack.credentials.project_domain_name != "" %}
      project-domain-name: "{{ openstack.credentials.project_domain_name }}"
      {% endif %}
      user-domain-name: "{{ openstack.credentials.user_domain_name }}"
      api-version: "{{ openstack.credentials.identity_api_version }}"
      master-key-name: "{{ openstack.vms.keyname }}"
      security-group: "{{ openstack.vms.security_group }}"

      default-flavor: "{{ openstack.vms.default_flavor }}"
      network-regex: '{{ openstack.vms.network_regex }}'
      flavor-regex: '{{ flavor_regex | default('') }}'
      ip-version: "4"
      post-install-script: "{{ openstack.vms.post_install_script }}"
      glance-version: "{{ openstack.vms.glance_version }}"

      capabilities:
        supports-spot-instances: false
        supported-architectures:
          - x86_64

      resources: {{ openstack.resources | default("{}") }}

  {% endif %}

  {% if azure is defined %}
  - name: azure
    driver: azure
    {% if azure.guest_tags is defined %}
    guest_tags: {{ azure.guest_tags }}
    {% endif %}
    parameters:
      {% if azure.credentials.service_principal %}
      login: "service-principal"
      tenant: "{{ azure.credentials.service_principal.tenant }}"
      username: "{{ azure.credentials.service_principal.username or '' }}"
      password: "{{ azure.credentials.service_principal.password or '' }}"
      {% else %}
      service-principal-auth: False
      username: "{{ azure.credentials.username or ''}}"
      password: "{{ azure.credentials.password or ''}}"
      {% endif %}
      resource-group: "{{ azure.vms.resource_group }}"
      location: "{{ azure.vms.location }}"
      post-install-script: "{{ azure.vms.post_install_script }}"

      capabilities:
        supports-spot-instances: false
        supported-architectures:
          - x86_64

      resources: {{ azure.resources | default("{}") }}
  {% endif %}

  {% if aws is defined %}
  - name: aws
    driver: aws
    {% if aws.guest_tags is defined %}
    guest_tags: {{ aws.guest_tags }}
    {% endif %}
    parameters:
      access-key-id: "{{ aws.credentials.access_key_id }}"
      secret-access-key: "{{ aws.credentials.secret_access_key }}"
      default-region: "{{ aws.default_region }}"

      command: aws
      master-key-name: "{{ aws.vms.keyname }}"

      # availability zone match chosen subnet
      availability-zone: "{{ aws.vms.availability_zone }}"
      subnet-id: "{{ aws.vms.subnet_id }}"
      security-group: "{{ aws.vms.security_group }}"
      # instance details
      default-instance-type: "{{ aws.vms.default_flavor }}"

      # By default, non-spot instances are launched in the pool. If you
      # would like to use spot instances instead, enable this option.
      use-spot-request: {{ aws.vms.use_spot_request | default(true) }}

      # How many % we bid on the spot instance price. Raise this if you
      # get too many instances terminated.
      spot-price-bid-percentage: {{ aws.vms.spot_price_bid_percentage | default(10) }}

      post-install-script: "{{ aws.vms.post_install_script }}"

      # Custom instance types (or, as Artemis calls them, "flavors").
      #
      # These are based on existing instance types, as supported by AWS (see [1]) but override one or more properties
      # for the purpose of providing flavors suitable for the common workflows in your deployment. For example,
      # various instance types leave the question of storage size open, leaving it to image or user to specify how
      # large should the root "disk" be. By using such an instance as a base, `diskspace` key creates a custom instance
      # with a particular root disk size.
      #
      # [1] https://aws.amazon.com/ec2/instance-types/
      # custom-flavors:
      #  - name: t2.small.20
      #    base: t2.small
      #    diskspace: "20 GiB"
      #
      #  - name: t2.small.40
      #    base: t2.small
      #    diskspace: "40 GiB"
      #
      #  - name: t2.medium.20
      #    base: t2.medium
      #    diskspace: "20 GiB"
      #
      #  - name: t2.medium.40
      #    base: t2.medium
      #    diskspace: "40 GiB"

      # Modification - "patching" - of existing instance types (or, as Artemis calls them, "flavors").
      #
      # Here a maintainer has an oportunity to modify autodetected parameters, or provide values that were not
      # autodetected at all. For example, CPU families, models and other bits that are documented yet not available
      # via provider API.
      #
      # [1] https://aws.amazon.com/ec2/instance-types/
      #
      # patch-flavors:
      #  - name: t2.small
      #    cpu:
      #      family: 6
      #      family-name: "Haswell"
      #      model: 63
      #      model-name: "Intel(R) Xeon(R) CPU E5-2676 v3 @ 2.40GHz"
      #
      # It is possible to modify even the custom flavors
      #  - name: t2.small.20
      #    cpu:
      #      family: 6
      #      family-name: "Haswell"
      #      model: 63
      #      model-name: "Intel(R) Xeon(R) CPU E5-2676 v3 @ 2.40GHz"

      capabilities:
        supports-spot-instances: {{ aws.vms.use_spot_instances | default(true) }}
        supported-architectures:
          - x86_64

      resources: {{ aws.resources | default("{}") }}
  {% endif %}

  {% if beaker is defined %}
  - name: beaker
    driver: beaker
    {% if beaker.guest_tags is defined %}
    guest_tags: {{ beaker.guest_tags }}
    {% endif %}
    parameters:
      {% if beaker.credentials.username is defined and beaker.credentials.username != "" -%}
      username: "{{ beaker.credentials.username }}"
      {% endif -%}
      {% if beaker.credentials.password is defined and beaker.credentials.password != "" -%}
      password: "{{ beaker.credentials.password }}"
      {% endif -%}

      capabilities:
        supports-spot-instances: false
        # supports any architecture - there may be other constraints based on distro vs. arch support,
        # but in general, Beaker is open
        supported-architectures: any

      resources: {{ beaker.resources | default("{}") }}
  {% endif %}
