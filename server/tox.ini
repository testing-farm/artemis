# commands = mypy --config-file {toxinidir}/mypy.ini --strict --allow-untyped-calls \

[tox]
envlist = py37,py37-database-migrations

[testenv]
whitelist_externals = poetry
                      bash

# Skip package installation - we will run `poetry install` as the first "test" command.
# This is more consistent with everyday use.
skip_install = true
skipsdist = true

# Don't spoil our nice virtualenvs with system packages
sitepackages = False

# Pass necessary env vars to let CI and coverage gathering play together nicely
passenv = CI TRAVIS TRAVIS_*

setenv =
  MYPYPATH = {toxinidir}/src

commands_pre = poetry install -v

commands = pytest --flake8 \
                  alembic \
                  configuration \
                  src/tft
           coverage run \
                    -m pytest -v \
                              -ra \
                              tests
           mypy --config-file {toxinidir}/mypy.ini \
                --strict \
                {toxinidir}/src/tft
           mypy --config-file {toxinidir}/mypy.ini \
                --strict \
                --namespace-packages \
                {toxinidir}/configuration
           mypy --config-file {toxinidir}/mypy.ini \
                --strict \
                --namespace-packages \
                {toxinidir}/alembic
           coverage html

# Docstring linters - opt-in only, adding fixed files one by one.
#
# Ignored errors:
#
# * D200 One-line docstring should fit on one line with quotes
# * D202 No blank lines allowed after function docstring
           flake8 --ignore '' --select D --ignore D200,D202 \
                  --docstring-style sphinx \
                  --strictness full \
                  src/tft/artemis/guest.py \
                  src/tft/artemis/metrics.py

[testenv:py37-database-migrations]
envdir = {toxworkdir}/py37

commands = bash -c 'rm -f test.db'
           poetry run alembic upgrade head
           bash -c 'poetry run alembic revision --autogenerate |& grep "No changes to schema detected"'
           poetry run alembic downgrade base

# Gluetool blocks us from using newer Sphinx & related packages, until that's fixed, overriding pyproject.toml
# by force. Also keeping this env isolated from the one used for tests - we could re-use it for autodocs, but
# our Sphinx tweak would cause issues when running the tests then.
[testenv:autodocs]
envdir = {toxworkdir}/autodocs
basepython = python3.7

commands = poetry run pip install "Sphinx>=3.2.1" "sphinx-autodoc-typehints>=1.11.0" "sphinx-rtd-theme>=0.5.0"
           poetry run make -C autodocs/ clean apidoc html

[flake8]
max-line-length = 120

# Disable docstring linter errors - when both darglint and flake8 are installed, flake8 runs darglint automagically
# because it sees darglint as its plugin. Since we run flake8 for all files, but not all files are ready to
# be covered by the linter yet, we cannot let flake8 to fail because of known-and-soon-to-be-fixed issues
# in docstrings.
#
# The same applies to flake8-docstrings - we cannot let it check all files, yet.
#
# Once we fix all files, we can drop this directive, let flake8 handle everything, and drop
# explicit `flake8 ...` command from `py37` testenv.
#
# D: flake8-docstrings
# DAR: darglint
ignore = D,DAR
