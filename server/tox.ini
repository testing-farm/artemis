# commands = mypy --config-file {toxinidir}/mypy.ini --strict --allow-untyped-calls \

[tox]
envlist = py37,py37-db-schema-revisions

[testenv]
whitelist_externals = poetry
                      bash

# Skip package installation - we will run `poetry install` as the first "test" command.
# This is more consistent with everyday use.
skip_install = true
skipsdist = true

# Don't spoil our nice virtualenvs with system packages
sitepackages = False

# Pass necessary env vars to let CI and coverage gathering play together nicely
passenv = CI TRAVIS TRAVIS_* POETRY_ADDOPTS MYPY_FORCE_COLOR PYTEST_ADDOPTS TERMINFO TERM ARTEMIS_DB_URL

setenv =
  MYPYPATH = {toxinidir}/src
  ARTEMIS_VAULT_PASSWORD = dummy-vault-password

commands_pre = bash -xc " \
        export; \
        poetry env use $(type -p python) $POETRY_ADDOPTS \
     && poetry env info $POETRY_ADDOPTS \
     && poetry install -v --remove-untracked $POETRY_ADDOPTS"

commands =
           # Static analysis, part #1: flake8 only.
           #
           # We'd like to use more recent mypy to check our type annotations, but
           # we are blocked by Gluetool, forcing us to use an older version. To
           # overcome this barrier, we install newer mypy explicitly via pip, but
           # let's push mypy run to the end, to avoid spoiling test environment
           # until we really have to.
           #
           # See https://github.com/python/mypy/pull/9232
           pytest -vv -ra \
                  --flake8 -m flake8 \
                  alembic \
                  configuration \
                  src/tft \
                  tests

           # Unit tests
           pytest -vv -ra --showlocals \
                  tests {posargs}

          # Docstring linters - opt-in only, adding fixed files one by one.
          #
          # Ignored errors:
          #
          # * D200 One-line docstring should fit on one line with quotes
          # * D202 No blank lines allowed after function docstring
           flake8 --ignore '' --select D --ignore D200,D202 \
                  --docstring-style sphinx \
                  --strictness full \
                  src/tft/artemis/cache.py \
                  src/tft/artemis/context.py \
                  src/tft/artemis/environment.py \
                  src/tft/artemis/guest.py \
                  src/tft/artemis/metrics.py \
                  src/tft/artemis/profile.py \
                  src/tft/artemis/tasks/refresh_pool_avoid_groups_hostnames_dispatcher.py \
                  src/tft/artemis/tasks/route_guest_request.py \
                  src/tft/artemis/tasks/update_guest_request.py

          # F-string linter - opt-in only, adding fixed files one by one.
           flake8 --ignore '' --select FS \
                  src/tft/artemis/__init__.py \
                  src/tft/artemis/cache.py \
                  src/tft/artemis/routing_policies.py \
                  src/tft/artemis/script.py \
                  src/tft/artemis/vault.py \
                  src/tft/artemis/api/ \
                  src/tft/artemis/drivers/ \
                  src/tft/artemis/profile.py \
                  src/tft/artemis/tasks/refresh_pool_avoid_groups_hostnames_dispatcher.py \
                  src/tft/artemis/tasks/route_guest_request.py \
                  src/tft/artemis/tasks/update_guest_request.py \
                  tests/

           # Static analysis, part #2: mypy only.
           #
           # Upgrade to recent Mypy to pull in fixes for handling of Pytest decorators. We are blocked by Gluetool
           # that requires older mypy_extensions, preventing us from using recent mypy out of the box.
           pip install -U mypy==0.931
           mypy --config-file {toxinidir}/mypy.ini \
                --strict \
                --show-error-codes \
                --namespace-packages \
                --explicit-package-bases \
                {toxinidir}/src
           mypy --config-file {toxinidir}/mypy.ini \
                --strict \
                --show-error-codes \
                --namespace-packages \
                --explicit-package-bases \
                {toxinidir}/configuration
           # TODO: way too many issues, worthy of its own patch
           #
           # mypy --config-file {toxinidir}/mypy.ini \
           #      --strict \
           #      --show-error-codes \
           #      --namespace-packages \
           #      --explicit-package-bases \
           #      {toxinidir}/alembic
           mypy --config-file {toxinidir}/mypy.ini \
                --strict \
                --show-error-codes \
                --namespace-packages \
                --explicit-package-bases \
                {toxinidir}/tests/

[testenv:py37-db-schema-revisions]
envdir = {toxworkdir}/py37

commands = bash -c 'rm -f test.db'
           poetry run alembic upgrade head
           bash -c 'poetry run alembic revision --autogenerate |& grep "No changes to schema detected"'
           poetry run alembic downgrade base

[testenv:py37-coverage]
envdir = {toxworkdir}/py37

commands = coverage erase
           coverage run -m pytest -vv -ra tests
           coverage html

# Gluetool blocks us from using newer Sphinx & related packages, until that's fixed, overriding pyproject.toml
# by force. Also keeping this env isolated from the one used for tests - we could re-use it for autodocs, but
# our Sphinx tweak would cause issues when running the tests then.
[testenv:autodocs]
envdir = {toxworkdir}/autodocs
basepython = python3.7

commands = poetry run pip install "Sphinx>=3.2.1" "sphinx-autodoc-typehints>=1.11.0" "sphinx-typlog-theme>=0.8.0"
           poetry run make -C autodocs/ clean apidoc html

[flake8]
max-line-length = 120

# Control flake8-use-fstring - we don't allow '%' nor .format()
percent-greedy = 2
format-greedy = 2

# Disable docstring and f-string linter errors - when plugins like darglint and use-fstring installed, flake8 runs
# then automagically because it just discovers them. Since we run flake8 for all files, but not all files are ready to
# be covered by theese linters yet, we cannot let flake8 to fail because of known-and-soon-to-be-fixed issues.
#
# Once we fix all files, we can drop this directive, let flake8 handle everything, and drop
# explicit `flake8 ...` commands from `py37` testenv.
#
# D: flake8-docstrings
# DAR: darglint
# FS: flake8-use-fstring
ignore = D,DAR,FS
