[tool.poetry]
name = "tft-artemis"
version = "0.0.65"
description = "Artemis is a machine provisioning service. Its goal is to provision a machine - using a set of preconfigured providers as backends - which would satisfy the given hardware and software requirements."
authors = [
  "Milos Prchlik <mprchlik@redhat.com>",
  "Anna Khaitovich <akhaitov@redhat.com>",
  "Evgeny Fedin <efedin@redhat.com>",
  "Miroslav Vadkerti <mvadkert@redhat.com>",
  "Ondrej Ptak <optak@redhat.com>",
  "Daniel Simko <dasimko@redhat.com",
  "Guy Inger <ginger@redhat.com>"
]
license = "Apache-2.0"
packages = [
  { include = "tft", from = "src" }
]
include = ["artemis/schema"]

[tool.poetry.dependencies]
python = "~3.9.0"
# New mypy vs. new Alembic: https://github.com/python/mypy/issues/11038 - Alembic 1.7.4 adds a workaround
alembic = "1.8.1"
awscli = { version = "^1.27.24", optional = true }
azure-cli = { version = "*", optional = true }
beaker-client = { version = "*", optional = true }
# BeautifulSoup could be updated but it's pinned by gluetool to an older version...
# beautifulsoup4 = "^4.9.3"
click = "*"
# TODO: 1.13.0 and newer add typing support, way bigger patch
dramatiq = { version = "1.13.0", extras = ["rabbitmq"] }
gluetool = "*"
gunicorn = "*"
jinja2-ansible-filters = "*"
jq = "*"
molten = "*"
Pint = "0.18"
# Avoid newer versions until either https://github.com/python/mypy/issues/10757 is fixed, or package
# delivers proper type annotations.
prometheus-client = "^0.12.0"
pyinstrument = "*"
psycopg2 = "*"
python-openstackclient = { version = "*", optional = true }
# See https://github.com/python-poetry/poetry/issues/4402
sqlalchemy = ">=1.4,<1.4.23"
sqlalchemy-utils = { version = "*", extras = ["encrypted"] }
stackprinter = "*"
typing-extensions = "*"
periodiq = "*"
redis = "*"
jsonschema = "*"
sentry-sdk = "*"
setuptools = "*"

[tool.poetry.extras]
full = [ "awscli", "azure-cli", "beaker-client", "python-openstackclient" ]

[tool.poetry.dev-dependencies]
# All development dependencies are left unpinned, untill we run into troubles with a particular version.

# Install `toml` extra to allow parsing pyproject.toml - no need for special config file for coverage.
coverage = { version = "*", extras = ["toml"] }
darglint = "*"
# flake8 5 introduced a bug https://github.com/tholo/pytest-flake8/issues/87
flake8 = "<5.0.0"
flake8-docstrings = "*"
flake8-use-fstring = "*"
isort = "*"
# This will be trimmed down to 0.730 or something because of much more specific mypy-extensions bellow. Blocked
# by Gluetool.
# TODO: 1.4.0 is the current release, but fails to play nicely with old typing-extensions
mypy = "^0.991"
pytest = "*"
pre-commit = "*"
pytest-flake8 = "*"
pytest-icdiff = "*"
pytest-mock = "*"
redislite = "*"
sqlalchemy-stubs = "*"
types-mock = "*"
types-setuptools = "*"

# mypy-extensions must match gluetool requiremens.
# mypy-extensions = "0.4.1"

#
# Autogenerated docs
#
# NOTE FOR GLUETOOL DEVELS: gluetool must become more up-to-date and more tolerant when it comes to Sphinx versions,
# it is blocking us from using less buggy Sphinx with support for type annotations.
# Sphinx = "^3.2.1"
# sphinx-autodoc-typehints = "^1.11.0"
# sphinx-typlog-theme = "^0.8.0"

[tool.poetry.scripts]
artemis-api-server = "tft.artemis.api:main"
artemis-worker = "tft.artemis.scripts.worker:cmd_root"
artemis-dispatcher = "tft.artemis.dispatcher:main"
artemis-scheduler = "tft.artemis.scripts.scheduler:cmd_root"

# New tools to work with database
artemis-db-init-content = "tft.artemis.scripts.init_db_content:cmd_root"

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

[tool.coverage.run]
source = [
  "src/tft/artemis"
]

[tool.isort]
py_version = "3"
line_length = "120"
multi_line_output = "2"
group_by_package = true

[tool.pytest.ini_options]
filterwarnings = [
  "ignore::DeprecationWarning"
]
