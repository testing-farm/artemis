[tool.poetry]
name = "tft-artemis"
version = "0.0.81"
description = "Artemis is a machine provisioning service. Its goal is to provision a machine - using a set of preconfigured providers as backends - which would satisfy the given hardware and software requirements."
authors = [
  "Milos Prchlik <mprchlik@redhat.com>",
  "Anna Khaitovich <akhaitov@redhat.com>",
  "Evgeny Fedin <efedin@redhat.com>",
  "Miroslav Vadkerti <mvadkert@redhat.com>",
  "Ondrej Ptak <optak@redhat.com>",
  "Daniel Simko <dasimko@redhat.com",
  "Guy Inger <ginger@redhat.com>"
]
license = "Apache-2.0"
packages = [
  { include = "tft", from = "src" }
]
include = ["artemis/schema"]

[tool.poetry.dependencies]
python = "~3.9.0"
# New mypy vs. new Alembic: https://github.com/python/mypy/issues/11038 - Alembic 1.7.4 adds a workaround
alembic = "1.8.1"
awscli = { version = ">=1.36.13", optional = true }
azure-cli = { version = "*", optional = true }
beaker-client = { version = "*", optional = true }
# BeautifulSoup could be updated but it's pinned by gluetool to an older version...
# beautifulsoup4 = "^4.9.3"
click = "*"
# TODO: 1.13.0 and newer add typing support, way bigger patch
dramatiq = {git = "https://github.com/dansimko/dramatiq.git", rev = "1.13.0-close-write-pipe", extras = ["rabbitmq"]}
gluetool = "^2.5"
gunicorn = "*"
jinja2-ansible-filters = "*"
jq = "*"
Pint = "0.18"
# Avoid newer versions until either https://github.com/python/mypy/issues/10757 is fixed, or package
# delivers proper type annotations.
prometheus-client = "^0.12.0"
pyinstrument = "*"
psycopg2 = "*"
# Do not use openstackclient >=7, there is some conflict between
# it and openstacksdk when calling `get_limits()`
python-openstackclient = { version = "^6.0.0", optional = true }
# See https://github.com/python-poetry/poetry/issues/4402
# sqlalchemy = ">=1.4,<1.4.23"
sqlalchemy = { version = "*", extras = [ "mypy", "postgresql", "postgresql-psycopg" ] }
sqlalchemy-utils = { version = "*", extras = ["encrypted"] }
stackprinter = "*"
# Bumping just one minor version of starlette seems to mess with mypy
starlette = "0.41.2"
typing-extensions = "*"
# pendulum 3.x has an ugly bug when timezone is not specified, https://github.com/sdispater/pendulum/issues/791
pendulum = "^2.0"
periodiq = "*"
redis = "*"
jsonschema = "*"
sentry-sdk = "^2.18"
setuptools = "*"
python-glanceclient = "*"
python-novaclient = "*"
fastapi = "*"
uvicorn = "*"
google-cloud-compute = "*"
pykickstart = "^3.58"
tmt = {git = "https://github.com/teemtee/tmt.git", rev = "main"}

[tool.poetry.extras]
full = [ "awscli", "azure-cli", "beaker-client", "python-openstackclient", "google-cloud-compute" ]

[tool.poetry.dev-dependencies]
# All development dependencies are left unpinned, untill we run into troubles with a particular version.

# Install `toml` extra to allow parsing pyproject.toml - no need for special config file for coverage.
coverage = { version = "*", extras = ["toml"] }
darglint = "*"
# flake8 5 introduced a bug https://github.com/tholo/pytest-flake8/issues/87
flake8 = "<5.0.0"
flake8-docstrings = "*"
flake8-use-fstring = "*"
httpx = "*"
# This will be trimmed down to 0.730 or something because of much more specific mypy-extensions bellow. Blocked
# by Gluetool.
# TODO: 1.4.0 is the current release, but fails to play nicely with old typing-extensions
mypy = "^0.991"
pytest = "*"
pre-commit = "*"
pytest-flake8 = "*"
pytest-icdiff = "*"
pytest-mock = "*"
redislite = "*"
# sqlalchemy-stubs = "*"
types-Pillow = "*"
types-mock = "*"
types-setuptools = "*"

# mypy-extensions must match gluetool requiremens.
# mypy-extensions = "0.4.1"

#
# Autogenerated docs
#
# NOTE FOR GLUETOOL DEVELS: gluetool must become more up-to-date and more tolerant when it comes to Sphinx versions,
# it is blocking us from using less buggy Sphinx with support for type annotations.
# Sphinx = "^3.2.1"
# sphinx-autodoc-typehints = "^1.11.0"
# sphinx-typlog-theme = "^0.8.0"

[tool.poetry.scripts]
artemis-api-server = "tft.artemis.api:main"
artemis-worker = "tft.artemis.scripts.worker:cmd_root"
artemis-dispatcher = "tft.artemis.dispatcher:main"
artemis-scheduler = "tft.artemis.scripts.scheduler:cmd_root"

# New tools to work with database
artemis-db-init-content = "tft.artemis.scripts.init_db_content:cmd_root"

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

[tool.coverage.run]
source = [
  "src/tft/artemis"
]

[tool.pytest.ini_options]
filterwarnings = [
  "ignore::DeprecationWarning"
]

[tool.ruff]
line-length = 120
indent-width = 4
src = ["src", "tests"]
target-version = "py39"
# The following comes from the tmt project - pretty much everything is disabled for now, and we
# will enable them one by one or in groups, to keep patches reviewable.
lint.select = [
    "ASYNC",  # flake8-async
    "E",      # pycodestyle error
    "F",      # pyflakes
    "FLY",    # flynt
    "FURB",   # refurb
    "I",      # isort
    "ICN",    # flake8-import-conventions
    "INT",    # flake8-gettext
    "ISC",    # flake8-implicit-str-concat
    "PGH",    # pygrep-hooks
    "PIE",    # flake8-pie
    "PLC",    # pylint-convention
    "PLE",    # pylint-error
    "PYI",    # flake8-pyi
    "N",      # pep8-naming
    "RSE",    # flake8-raise
    "RUF",    # Ruff-specific rules
    "SIM",    # flake8-simplify
    "T10",    # flake8-debugger
    "TRY",    # tryceratops
    "UP",     # pyupgrade
    "W",      # pycodestyle warning
    "YTT",   # flake8-2020
    ]
lint.ignore = [
    "PLC0415",  # `import` should be at the top-level of a file
    "S101",     # Use of `assert` detected
    # Conflicts with our use of other linters that ruff does not recognize.
    "RUF100",   # unused-noqa	Unused noqa directive
    # Creating our own exceptions does not seem tempting for now.
    "TRY002",   # raise-vanilla-class
    "TRY003",   # raise-vanilla-args
    # `logger.error` is preferred over `logger.exception`.
    "TRY400",   # error-instead-of-exception
    ]

[tool.ruff.lint.isort]
combine-as-imports = true
force-sort-within-sections = false
known-first-party = ["tft"]

[tool.ruff.format]
indent-style = "space"
line-ending = "lf"
quote-style = "single"
